/******************************************************************************************************************************
Class:         ValidatorXMLLauncherController
-------------------------------------------------------------------------------------------------------------------------------
Author:        Joydev Mondol (Cognizant - 153480)
Created Date:  28/10/2013
Reason:        Controller class generate the XML Validator and send email to external system
History:       Prosenjit Saha - 
                    Reason:    06122015  -  Adding IP tagging information in place of the IP ID
               Anirban Roy - 
                    Reason:    07032015  -  Adding fields in the XML.
               Karna Shiva -
                    Reason: 02042016 - Adding Device details section.
               Amrita Agarwal - 
                    Reason: 01202017 - Split device model names those are comma seperated.
               Ravi Teja Boggala
                     Reason: 20032017 - Case#00068494 & Case#00068406 - Devices are not showing correctly in XML, as the space also consider
                                                             as an delimiter for spliting devices
                Ravi Teja Boggala
                     Reason: 04042017 - Hot Fix - <device></device> in config xml suppose to be <devices></devices> Line Numbers: 131 and 133                        
                Prachi 
                     Reason: 08212017 - Removing duplicate Device names(Lines 66-68)
                Ravi Teja Boggala
                     Reason: Case#00084788 08012018 - Adding Assigned PID Mask Set to the XML  
*******************************************************************************************************************************/

public class ValidatorXMLLauncherController {

    private String szSubject = 'Validator XML for Configuration ';
    private String szBody = 'This is a autogenerated mail from the Configurator. \nPlease find attached the Validator XML.\n\n';
    private Apttus_Proposal__Proposal__c proposal;
    private String szDelimiter = '[,<:>\\s]{1}[:]?';
    private String sDevicezDelimiter = '\n';
    public ValidatorXMLLauncherController(){        
        //AR 07032015: adding fields in the XML
        proposal = [Select Id,
                           Name,
                           Devices__c,
                           //changed reference of Mask_Set__c to Mask_Set_Long__c for the Case#00051463
                           Mask_Set_Long__c,
                           IPs__c,                          
                           Account_Short_Name__c,
                           CRMDID__c,
                           Process_Technology_Geometry__c,
                           Process_Technology__c,
                           Device_Description__c,
                           Device__c,
                           Device__r.Assigned_Process_ID__c,
                           Device__r.Assigned_Process_ID__r.Mask_Layers__c,
                           Device__r.Assigned_Process_Name__c 
                      From Apttus_Proposal__Proposal__c
                     Where Id = :ApexPages.currentPage().getParameters().get('Id')];
        
        szSubject += proposal.Name;
    }
    
    public String generateValidatorXML(){ 
        String szMasks = '';       //[M] == <layer><mask>AD</mask></layer>
        String szDevices = '';     //[D] == <device>egncap</device>
        String szDevicesdetail='';
        String szIPs = '';         //[I] == <ip>ip_text1</ip>
        String sFields = '';
        String szPIDMasks = '';
        //Added by Ravi Teja 08012018 Case#00084788
        if(proposal.Device__r.Assigned_Process_ID__r.Mask_Layers__c != null){
            for(String s: proposal.Device__r.Assigned_Process_ID__r.Mask_Layers__c.split(',')){
                szPIDMasks += (s.trim() != '' ? '\t\t<layer><mask>' + s + '</mask></layer>\n' : '');
            }
        }
        if(proposal.Mask_Set_Long__c != null){
            for(String szMask : proposal.Mask_Set_Long__c.split(' ')){
                szMasks += (szMask.trim() != '' ? '\t\t\t<layer><mask>' + szMask + '</mask></layer>\n' : '');
            }
        }
        

        if(proposal.Devices__c != null){
            Set<String> result = new Set<String>();
            result.addAll(proposal.Devices__c.split('<:>'));
            for(String szDevice : result ){
                szDevices += (szDevice.trim() != '' ? '\t\t<device>' + szDevice + '</device>\n' : '');
            }
        }


    // 02042016  - adding device details - start
   
   if(proposal.Device_Description__c != null){
       
    List<String> szDevicedetailcount = proposal.Device_Description__c .split(sDevicezDelimiter);
    
    for(String szDevice : proposal.Device_Description__c .split(sDevicezDelimiter)){
    
    if(szDevice <> null) {
       String[] lsttest1 = szDevice.split('=>');
       
                 if(szDevicedetailcount.size() > 1){
                    szDevicesdetail +='\t\t<device>\n';
                    }
                    szDevicesdetail += (szDevice.trim() != '' ? '\t\t\t<device_name>' + lsttest1[1].trim() + '</device_name>\n' : '');
                    szDevicesdetail += (szDevice.trim() != '' ? '\t\t\t<device>' + lsttest1[0] + '</device>\n' : '');
                  if(szDevicedetailcount.size()> 1){
                    szDevicesdetail += '\t\t</device>\n';
                    }
          }
    
      }
      }
    // 02042016  - adding device details - end
    
        //AR 07032015: adding fields in the XML
        sFields += (proposal.Name != null)?'\t<ConfigurationName>' + proposal.Name + '</ConfigurationName>\n':'';
        sFields += (proposal.Device__r.Assigned_Process_Name__c != null)?'\t<AssignedProcessId>' + proposal.Device__r.Assigned_Process_Name__c + '</AssignedProcessId>\n':'';
        sFields += (proposal.Account_Short_Name__c != null)?'\t<AccountShortName>' + proposal.Account_Short_Name__c + '</AccountShortName>\n':'';
        sFields += (proposal.CRMDID__c != null)?'\t<CRMDeviceId>' + proposal.CRMDID__c + '</CRMDeviceId>\n':'';
        sFields += (proposal.Process_Technology_Geometry__c != null)?'\t<Geometry>' + proposal.Process_Technology_Geometry__c + '</Geometry>\n':'';
        sFields += (proposal.Process_Technology__c != null)?'\t<ProcessTechnology>' + proposal.Process_Technology__c + '</ProcessTechnology>\n':'';
        
        //PS 06122015: adding IP tagging logic.
        List<String> IPIDs = new List<String>(); 
        if(proposal.IPs__c != null){
            for(String szIp : proposal.IPs__c.split(szDelimiter)){
                IPIDs.add(szIp);
            }    
            for(IP__c IPDK : [SELECT    ID
                                        , IP_Tagging_Information__c
                                        , IP_ID__c
                                        , IPNumber__r.name
                                        , Latest_Design_Kit__c
                             FROM       IP__c
                             WHERE      IPNumber__r.name 
                             IN         :IPIDs
                             AND        Latest_Design_Kit__c = TRUE]){
                szIps += (IPDK.IP_Tagging_Information__c!= NULL && IPDK.IP_Tagging_Information__c.trim() != '' ? '\t\t<ip>' + IPDK.IP_Tagging_Information__c + '</ip>\n' : '');
            }        
        }
         
        //Modified by Ravi Teja.B from <device></device> to <devices><devices> on 04/04/2017
        //AR 07032015: adding fields in the XML
        String szXML = '<?xml version=\"1.0\"?>\n' +
                       '<configurator>\n' +
                           '\t<layers>\n' +
                               '\t\t<mask_and_design_layers>\n' +
                                   szMasks +
                               '\t\t</mask_and_design_layers>\n' +
                           '\t</layers>\n' +
                           '\t<assigned_PID_layers>\n' + //Added by Ravi Teja 08012018 Case#00084788
                                   szPIDMasks +
                           '\t</assigned_PID_layers>\n' +
                           '\t<devices>\n' +
                               szDevices +
                           '\t</devices>\n' +
                           '\t<ipversions>\n' +
                               szIps +
                           '\t</ipversions>\n' +
                               sFields + 
                           '\t<device_details>\n' +
                               szDevicesdetail +
                           '\t</device_details>\n' +
                       '</configurator>\n';
        
        szBody += szXML + '\n\nGLOBALFOUNDRIES';
        return szXML;
    }
    
    public PageReference sendValidatorXML() {
        // Define the email
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage(); 

        // Create the email attachment
        Messaging.EmailFileAttachment efa = new Messaging.EmailFileAttachment();
        efa.setFileName('Configuration(' + proposal.Name + ').xml');
        
        efa.setBody(Blob.valueOf(generateValidatorXML()));
        String addresses = UserInfo.getUserEmail();
        
        
        String[] toAddresses = addresses.split(':', 0);

        // Sets the paramaters of the email
        email.setSubject( szSubject );
        email.setToAddresses( toAddresses );
        email.setPlainTextBody( szBody );

        email.setFileAttachments(new Messaging.EmailFileAttachment[] {efa});

        // Sends the email
        Messaging.SendEmailResult [] r = 
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] {email});   
        
        return new Pagereference('/'+ ApexPages.currentPage().getParameters().get('Id'));
    }
}