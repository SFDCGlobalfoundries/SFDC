public class MRSCADORCService extends MRSCADGeneralService {
    
    private MRS_CADService.MRSDataRecievedOnORCNStatusChange msgData;
    
    public MRSCADORCService() {
        Environment_Variable__c debugMode = Environment_Variable__c.getInstance('SWIFT_CAD_WS_ORC_DEBUG'); 
        this.isDebugMode = (null != debugMode && debugMode.Value__c == 'ON') ? true : false;
        this.WS_CLASS_NAME = MRSCADGeneralService.WS_ORC;
        this.activeWsName = 'ORC';        
    }
    
    public override Message validateFormat(String jsonMsg) {
        MRS_CADService.MRSDataRecievedOnORCNStatusChange msg = 
            (MRS_CADService.MRSDataRecievedOnORCNStatusChange) JSON.deserialize(jsonMsg, MRS_CADService.MRSDataRecievedOnORCNStatusChange.class);

        this.msgData    = msg;
        this.mst        = msg.maskSetTitle;
        this.sourceTime = msg.sourceInboundRequestTimestamp;
        this.messageId  = msg.messageID;
        
        if (msg.ptrf == null || msg.ptrf.size() == 0) return new Message(MSG_PTRF_REQUIRED,'', true);
        
        for (MRS_CADService.ptrfdata iPTRF: msg.ptrf) {
            this.ptrfData = iPTRF;
            if (iPTRF.chip == null || iPTRF.chip.size() == 0) return new Message(MSG_PTRF_NO_CHIP,'', true);
            
            for (MRS_CADService.chipData iChip: iPTRF.chip) {
                this.setChipName.add(iChip.chipName);
                if (iChip.layer == null || iChip.layer.size() == 0) return new Message(MSG_CHIP_NO_LAYER,'', true);
                
                for (MRS_CADService.layerData iLayer: iChip.layer) {
                    setLayerNumber.add(iLayer.maskLayer);
                    setLayerRev.add(iLayer.maskRev);
                }
            }
        }

        return new Message('','', false);
    }

    public override void processWS() {
        //store layer chip for updating
        List<MRS_Layer_Chip_Association__c> lcToUpdateList  = new List<MRS_Layer_Chip_Association__c>();
        
        for(MRS_CADService.ChipData msgChip: ptrfData.chip) {
            String chipUniqueIdentifier = this.ptrfData.ptrfNumber + msgChip.chipName;//follow format in MRSCADGeneralService
            if( !chipNameSet.contains( msgChip.chipName ) ) {
                //this error map will be processed in handleResponse()
                chipErrorMap.put( chipUniqueIdentifier, new Message(MRSCADGeneralService.MSG_CHIP_NOT_FOUND,'',true) ); 
                setChipNotFound.add(msgChip.chipName);//use for sending missing layer/chip email
                continue;
            }
            
            for(MRS_CADService.LayerData msgLayer: msgChip.layer) {
                String layerUniqueIdentifier = chipUniqueIdentifier + msgLayer.maskLayer + msgLayer.maskRev;
                
                if( !layerUniqueIdSet.contains( layerUniqueIdentifier ) ) {
                    //check in cancel list -> if in cancel list -> layer chip is cancel
                    if( layerChipCancelSet.contains( layerUniqueIdentifier ) ) {
                        layerChipErrorMap.put( layerUniqueIdentifier, new Message('Layer chip is cancel','',false) ); 
                    }else { 
                        layerChipErrorMap.put( layerUniqueIdentifier, new Message(MRSCADGeneralService.MSG_LAYER_NOT_FOUND,'',true) );
                        setLayerNotFound.add( msgLayer.maskLayer + msgLayer.maskRev );//use to send missing layer/chip email
                    }
                    continue;
                }
                
                MRS_Layer_Chip_Association__c tmpChip = layerChipMap.get(layerUniqueIdentifier);
                
                //invalid layer status: layer is shipped or released
                if( /*tmpChip.Layer__r.Layer_Status__c == 'Released'  ||*/ tmpChip.Layer__r.Layer_Status__c == 'Shipped' ){
                    layerChipErrorMap.put( layerUniqueIdentifier, new Message('Layer is ' + tmpChip.Layer__r.Layer_Status__c,'',false) ); 
                    continue;
                }
                
                //invalid layer chip status, only Not Ready / In Progress / Hold are processed
                if(!'Not Ready;In Progress;Hold;Released'.containsIgnoreCase(tmpChip.Layer_Chip_Status__c.trim())) {
                    layerChipErrorMap.put( layerUniqueIdentifier, new Message('Layer chip is ' + tmpChip.Layer_Chip_Status__c,'',false) );
                    continue;
                }
                
                String lastSyncTimestamp = 'Last_Sync_Req_Timestamp_ORCN_Job__c';
                String toUpdateField     = 'ORC__c';
                String isUpdated         = 'Is_ORC_Updated__c';
                
                if(tmpChip.get(lastSyncTimestamp) != null && (DateTime) tmpChip.get(lastSyncTimestamp) >= this.sourceTime) {
                    layerChipErrorMap.put( layerUniqueIdentifier, new Message(MSG_RECORD_SYNCED,'',false) );
                    continue;
                }

                //processing after all initial validation passed
                MRS_Layer_Chip_Association__c chipToUpdate = new MRS_Layer_Chip_Association__c(Id = tmpChip.Id);
                
                List<String> recordManualUpdatedError = new List<String>();
                if(false == (boolean) tmpChip.get(isUpdated)) {
                    chipToUpdate.put(lastSyncTimestamp, this.sourceTime);//update source time
                    
                    //orc status is: empty || null || not Pend/Pass
                    if(null == msgLayer.jobStatus || '' == msgLayer.jobStatus.trim()) { chipToUpdate.put(toUpdateField, 'N.A.'); }
                    //orc pend
                    else if('PEND'.equalsIgnoreCase(msgLayer.jobStatus.trim())) { chipToUpdate.put(toUpdateField, 'In Progress'); }
                    //orc pass
                    else if('PASS'.equalsIgnoreCase(msgLayer.jobStatus.trim())) { chipToUpdate.put(toUpdateField, 'Done'); }
                    
                    else { 
                        layerChipErrorMap.put(layerUniqueIdentifier, new Message('Invalid ORC status: ' + msgLayer.jobStatus,'',true));
                        continue;
                    }
                    
                    lcToUpdateList.add(chipToUpdate);
                } else { recordManualUpdatedError.add(toUpdateField); }

                if(!recordManualUpdatedError.isEmpty() ) {
                    layerChipErrorMap.put(layerUniqueIdentifier,
                        new Message(String.join(recordManualUpdatedError, ', ') + ': ' + MRSCADGeneralService.MSG_FIELD_UPDATED_MANUALLY,'',false));
                }
            }
        }

        //do update and handle runtime error
        postProcessing(lcToUpdateList);
    }

    @TestVisible
    private void postProcessing(List<MRS_Layer_Chip_Association__c> lcToUpdateList) {
        if(lcToUpdateList.isEmpty()) return;
        
        Database.SaveResult[] updateResult = database.update(lcToUpdateList, false); //DML to update layer chip
        //this map is use to retrieve new data after perform update dml for referencing with original before update list lcToUpdateList
        map<id, mrs_layer_chip_association__c> lcToUpdateForCompare = new map<id, mrs_layer_chip_association__c>([
            SELECT ID,Chip__r.Name,Layer__r.Name,Rev__c FROM mrs_layer_chip_association__c WHERE ID IN :lcToUpdateList
        ]);
        
        String layerUniqueIdentifier = '';
        String key = '';
        
        for (Integer i=0; i< updateResult.size(); i++) {
            key = lcToUpdateList.get(i).id;
            if( !updateResult.get(i).isSuccess() ) {
                String error = updateResult.get(i).getErrors().get(0).getmessage();
                if(error.containsIgnoreCase('unable to obtain exclusive access to this record')) error = 'unable to obtain exclusive access to this record';
                layerUniqueIdentifier = ptrfData.ptrfNumber + lcToUpdateForCompare.get(key).Chip__r.Name + lcToUpdateForCompare.get(key).Layer__r.Name + lcToUpdateForCompare.get(key).Rev__c;                  
                layerChipErrorMap.put(layerUniqueIdentifier, new Message(error,'',true));
                continue;
            }
        }
    }
}