<!--
    Author: Ariz Solito
    Description: This serves as the GDS upload page in the Multi Source Tapeout.
    History: 
        ASolito             - page creation.
        ARoy    01122015    - modified page to include the GDS Header component code. 
-->

<apex:page controller="GDSUploadCntrlr" sidebar="false" showHeader="false" cache="false" action="{!init}">    
    <apex:includeScript value="{!$Resource.jQuery1_10_1}"/>
    <style>
        .page-number {
            cursor: pointer;
            cursor: hand;
            padding-left:2px;
            padding-right:2px;
            border:1px solid;
        }
        .error-msg-padding {
            visibility: hidden;
            display:block;
        }
        .error-msg {
            font-weight:bold;
            font-size: 10px;
            color: red;
            padding-left: 2px;
            width:170px;
            display:block;
        }
        .loading {
            display: none;        
            position:absolute;
            z-index:-1;
            top: 400px; 
            left: 600px;                       
            text-align:center; 
            background-color: white;
        }       
        .modalOverlay {
            display: none;
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0px;
            left: 0px;
            z-index:-1;
            background-color: rgba(0,0,0,0.3); /* black semi-transparent */
        }
        
        .fake-link {
            text-decoration: underline;
            cursor: pointer; 
            cursor: hand;
        }
        .field-label {
            font-weight: bold;
        }                     

        .checkout-wrap {
            color: #444;
            font-family: 'PT Sans Caption', sans-serif;            
            max-width: 1200px;
            position: relative;
        }

        <!-- Progress with steps -->

        ol.progtrckr {
            margin: 0;
            padding: 0;
            list-style-type none;
            align: center;
        }
    
        ol.progtrckr li {
            display: inline-block;
            text-align: center;
            line-height: 3em;
            font-size: 120%;
            font-family: 'PT Sans Caption', sans-serif;
            font-weight:bold;
        }

        ol.progtrckr[data-progtrckr-steps="4"] li { width: 20%; }

        ol.progtrckr li.progtrckr-done {
            color: yellowgreen;
            border-bottom: 4px solid yellowgreen;
        }
    
        ol.progtrckr li.progtrckr-active {
            color: orange;
            border-bottom: 4px solid orange;
        }
    
        ol.progtrckr li.progtrckr-todo {
            color: silver; 
            border-bottom: 4px solid silver;
        }
        
        ol.progtrckr li.progtrckr-next-active {
            color: black;
            border-bottom: 4px solid black;
        }

        ol.progtrckr li:after {
            content: "\00a0\00a0";
        }
        ol.progtrckr li:before {
            position: relative;
            bottom: -2.5em;
            float: left;
            left: 50%;
            line-height: 1em;
        }
        ol.progtrckr li.progtrckr-done:before {
            content: "\2713";
            color: white;
            background-color: yellowgreen;
            height: 1.2em;
            width: 1.2em;
            line-height: 1.2em;
            border: none;
            border-radius: 1.2em;
        }
        
        ol.progtrckr li.progtrckr-active:before {
            content: "\2713";
            color: white;
            background-color: orange;
            height: 1.2em;
            width: 1.2em;
            line-height: 1.2em;
            border: none;
            border-radius: 1.2em;
        }
        
        ol.progtrckr li.progtrckr-next-active:before {
            content: "\039F";
            color: black;
            background-color: white;
            font-size: 1.5em;
            bottom: -1.6em;
        }
        
        ol.progtrckr li.progtrckr-todo:before {
            content: "\039F";
            color: silver;
            background-color: white;
            font-size: 1.5em;
            bottom: -1.6em;
        }
        
    </style>    
    <script>
        $(document).ready(function() {            
            rebind();
                                                           
            $('.upload-btn').click(function() {
                var uploadFile = $('.upload-gds-file').val(); 
                
                if(uploadFile == ''){
                    alert('Please upload a GDS file.');
                } else {
                    if({!AND(masterlist.layers.size == 0)}){
                        uploadGDS();
                    } else {
                        var answer = confirm('GDS layer information already exists. Uploading a new file will delete the existing layers. Are you sure?');
                        if(answer){
                            uploadGDS();                                
                        }
                    }
                }
            });
        });
                
        function confirmTranslate(){
            if({!AND(overrideGDS = 'true')}){
                translate();                
            } else {
                var val = confirm("Unsaved GDS Layers won't be processed in the Translation process. Please make sure to save your GDS Layers first before initiating the translation process. Proceed with the translation?");
                
                if(val){
                    translate();
                }                 
            }             
        }        
        
        function rebind(){
            if({!NOT(overrideGDS = 'true')}){
                $('.layer-column').prop("readonly",true);
            }
            $('.help-text').attr('title', 'Please refer to the Download GDS Information template for the correct format of the GDS Info file');
            
            $('.pagenum').click(function() {               
                movePage($(this).text());    
            });
        } 
        
        function showLoading(){ 
            $('.modalOverlay').css('z-index', 2);
            $('.modalOverlay').show();
            $('.loading').show();                 
            $('.loading').css('z-index', 3);          
        }
        
        function stopLoading(){                  
            $('.loading').css('z-index', -1);
            hideDiv();          
        }                       
      
        function hideDiv(){            
            $('.modalOverlay').hide();           
            $('.loading').hide();            
        }               
    </script>        
    <apex:form >                       
        <apex:actionFunction name="uploadGDS" action="{!uploadGDS}"/>                    
        <apex:pageBlock title="GDS Information File - {!IF(NOT(OR(productName = 'Not Applicable',ISNULL(productName))),productName,'')} {!IF(NOT(OR(productRevision = 'Not Applicable',ISNULL(productRevision))),productRevision,'')} " id="block1">
            <apex:outputPanel rendered="{!AND(masterlist.layers.size = 0)}">
                <apex:pageMessages />                        
            </apex:outputPanel>
            <apex:outputPanel layout="block" style="text-align:center;margin-bottom:10px">
                <apex:commandButton value="Back to Review Selection" action="{!back}" rendered="{!NOT(OR(masterlist.gds.Status__c="Translating",masterlist.layers.size > 0))}"/>                
            </apex:outputPanel> 
            <apex:pageBlockSection columns="2" title="Upload file" collapsible="true" id="section1">
                <apex:pageBlockSectionItem >            
                    <apex:outputPanel lang="block">
                        <apex:inputFile value="{!contentFile}" filename="{!filename}" styleclass="upload-gds-file"/>                                                 
                        <apex:image value="/img/alohaSkin/help_orange.png" styleClass="help-text"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>            
                <apex:pageBlockSectionItem >
                    <apex:outputLink value="{!$Resource.GDSTemplate}" target="_blank" >Download GDS Information Template</apex:outputLink>                    
                </apex:pageBlockSectionItem> 
                <apex:pageBlockSectionItem >                                    
                    <apex:outputPanel layout="block" >                        
                        <br/>
                        <apex:outputLabel value="Load GDS ASCII file" style="padding:4px 3px" styleClass="upload-btn btn"/> 
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <script>
                    if({!AND(masterlist.layers.size > 0)}){
                        twistSection(document.getElementById('{!$Component.block1.section1}').getElementsByTagName('img')[0]);
                    } 
                </script> 
            </apex:pageBlockSection>                      
        </apex:pageBlock>      
        <apex:actionRegion >
        <apex:actionFunction name="translate" action="{!translate}"/>            
        <apex:actionFunction name="movePage" action="{!movePage}"  rerender="pages,tbl1" oncomplete="rebind()" status="loading">
            <apex:param assignTo="{!pageNum}" value="" name="pageNum"/>
        </apex:actionFunction>
        <apex:actionFunction name="deleteNewLayer" action="{!deleteNewLayer}" rerender="tbl2,block2" oncomplete="rebind()" status="loading">
            <apex:param assignTo="{!deleteNewRow}" value="" name="deleteNewRow"/>
        </apex:actionFunction>       
        <apex:actionStatus onstart="showLoading()" onstop="stopLoading()" id="loading"/>
        <apex:pageBlock title="Layer Information" rendered="{!AND(masterlist.layers.size > 0)}" id="block2">     
            <!-- Div for loading status-->          
            <apex:outputPanel layout="block" styleclass="loading">
                <apex:outputText value="Loading" style="font-weight:bold;margin-right:20px;font-size:20px"/>
                <apex:image value="/img/loading32.gif"/>
            </apex:outputPanel>  
            <apex:outputPanel layout="block" styleclass="modalOverlay"/>      
            <apex:outputPanel layout="block" style="margin-bottom:10px">
                <apex:panelGrid columns="4" style="padding-right:3px;margin-left:auto;margin-right:auto">                    
                    <apex:commandButton value="Back to Review Selection" action="{!back}" rendered="{!NOT(masterlist.gds.Status__c = 'Translating')}"/>
                    <apex:commandButton value="Save and Continue" action="{!save}" rendered="{!NOT(overrideGDS = 'true')}"/>
                    <apex:outputLabel value="Translate GDS" onclick="confirmTranslate()" styleClass="btn" style="padding-top:4px;padding-bottom:4px" rendered="{!NOT(ISNULL(masterlist.gds.id))}"/>                                
                    <apex:commandButton value="Close Configuration" action="{!cancel}"/>
                </apex:panelGrid>
            </apex:outputPanel>             
            <apex:pageMessages /> 
            <!--<c:GDSHeader gid="{!configurationId}" gid2="{!retID1}" gid3="{!retID2}" gid4="{!retID3}" gfilename="{!masterlist.fileName}" gtopcellname="{!masterlist.topCellName}" gGDSCount="{!masterlist.layerCount-1}"/>-->
            
            <!---------GDS Header Component Code---------->
        
            <apex:actionFunction name="backToGDS" action="{!backToGDS}"/>
            <apex:actionFunction name="backToTransLate" action="{!backToTranslate}"/>
            <table width="80%" align="center"><tr><td>
                <ol class="progtrckr" data-progtrckr-steps="4">
                    <li class="progtrckr-done">
                        <apex:outputPanel rendered="{!GDSUploadStep = 'progtrckr-active'}">
                            <apex:commandLink target="_self" action="{!back}" value="1. Configuration" style="color:yellowgreen;"/>                        
                        </apex:outputPanel> 
                        <apex:outputPanel rendered="{!NOT(GDSUploadStep = 'progtrckr-active')}">
                            <apex:outputLabel value="1. Configuration"/>
                        </apex:outputPanel>                    
                    </li>    
                    <li class="{!GDSUploadStep}">
                        <apex:outputPanel rendered="{!OR(GDSUploadStep = 'progtrckr-active',AND(GDSTranslateStep = 'progtrckr-active',NOT(isPortalUser)))}">
                            <apex:outputLabel value="2. GDS ASCII File Upload" styleclass="fake-link" onclick="backToGDS()"/>                    
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!OR(AND(NOT(GDSUploadStep = 'progtrckr-active'),NOT(GDSTranslateStep = 'progtrckr-active')),AND(GDSTranslateStep = 'progtrckr-active',(isPortalUser)))}">
                            <apex:outputLabel value="2. GDS ASCII File Upload"/>
                        </apex:outputPanel>                                                          
                    </li>    
                    <li class="{!GDSTranslateStep}">
                        <apex:outputPanel rendered="{!AND(OR(GDSTranslateStep = 'progtrckr-active',GDSTranslateStep = 'progtrckr-next-active'),NOT(ISNULL(masterlist.gds.id)))}">
                            <apex:outputLabel value="3. Translation Stage" styleclass="fake-link" onclick="confirmTranslate()"/>                                              
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!NOT(OR(GDSTranslateStep = 'progtrckr-active',GDSTranslateStep = 'progtrckr-next-active'))}">
                            <apex:outputLabel value="3. Translation Stage"/>
                        </apex:outputPanel>                 
                    </li>    
                    <li class="{!GDSApproveStep}">4. Approved</li>      
                </ol>
            </td></tr></table>
      
            <apex:panelGrid columns="2" style="padding-top: 40px">       
               <apex:outputLabel value="File Name:" styleClass="field-label"/>
               <apex:outputText value="{!masterlist.fileName}" style="padding-left:10px"/>
               
               <apex:outputLabel value="Top Cell Name:" styleClass="field-label"/>
               <apex:outputText value="{!masterlist.topCellName}" style="padding-left:10px"/>
               
               <apex:outputLabel value="GDS Layer count:" styleClass="field-label"/>
               <apex:outputText value="{!masterlist.layerCount-1}" style="padding-left:10px"/>                              
                   
            </apex:panelGrid>      
            
            <!------End of GDS Header Component Code------>
            
            <br/>
            <apex:outputPanel layout="block" style="padding: 5px 0px; text-align:right" id="pages">
                <Apex:repeat value="{!masterlist.pageNumbers}" var="p">
                    <apex:outputPanel style="padding-left:10px;padding-right:5px">                    
                        <apex:outputPanel style="{!IF(p.hasError = TRUE,'color:red;','')};{!IF(p.pageNum == pageNum,'font-weight:bold;font-size:18px','')}" styleClass="page-number">
                            <apex:outputText value="{!p.pageNum}" styleClass="pagenum"/>
                        </apex:outputPanel>
                    </apex:outputPanel>
                </Apex:repeat>
            </apex:outputPanel>         
            <apex:pageBlockSection columns="1">                                  
                <apex:pageBlockTable value="{!masterlist.pages[masterlist.pageNumber]}" var="m" id="tbl1">                                      
                    <apex:column headerValue="Action" rendered="{!AND(overrideGDS = 'true')}"> 
                        <apex:image value="/img/func_icons/remove12_on.gif" title="Delete" style="cursor:pointer;cursor:hand;" onclick="deleteLayer('{!m.rowCount}')"/>
                    </apex:column> 
                    <apex:column headerValue="Row">
                        <apex:outputText value="{!m.rowCount}"/>
                    </apex:column>                                   
                    <apex:column headerValue="LAYER">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.layerNumber}" styleClass="layer-column" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg">                              
                                <apex:outputText value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>
                    <apex:column headerValue="DATATYPE">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.layerDataType}" styleClass="layer-column" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg-padding">                              
                                <apex:outputLabel value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>
                    <apex:column headerValue="NAME">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.name}" styleClass="layer-column" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg-padding">                              
                                <apex:outputText value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>                    
                    <apex:column headerValue="PURPOSE">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.purpose}" styleClass="layer-column" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg-padding">                              
                                <apex:outputText value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>                  
                    <apex:column headerValue="Data Verified">
                        <apex:image value="/img/msg_icons/confirm32.png" rendered="{!AND(NOT(m.hasValidationError),NOT(m.hasNumericError),NOT(m.hasDuplicateError))}"/>
                        <apex:image value="/img/msg_icons/error32.png" rendered="{!OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)}"/>
                    </apex:column>            
                </apex:pageBlockTable> 
            </apex:pageBlockSection>
        </apex:pageBlock>
        <apex:pageBlock title="Add New Layers" rendered="{!AND(masterlist.layers.size > 0)}" id="block3">            
            <apex:outputPanel layout="block" style="text-align:center;margin-bottom:10px">
                <apex:commandButton value="Add row" action="{!addLayer}" status="loading" reRender="block3"/>             
            </apex:outputPanel>                     
            <apex:pageBlockTable value="{!masterlist.addedLayers}" var="m" id="tbl2"> 
                <apex:column headerValue="Action"> 
                        <apex:image value="/img/func_icons/remove12_on.gif" title="Delete" style="cursor:pointer;cursor:hand;" onclick="deleteNewLayer('{!m.rowCount}')"/>
                    </apex:column> 
                <apex:column headerValue="LAYER">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.layerNumber}" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg">                              
                                <apex:outputText value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>
                    <apex:column headerValue="DATATYPE">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.layerDataType}" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg-padding">                              
                                <apex:outputLabel value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>
                    <apex:column headerValue="NAME">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.name}" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg-padding">                              
                                <apex:outputText value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>                    
                    <apex:column headerValue="PURPOSE">
                        <apex:outputPanel layout="block">                            
                            <apex:inputText value="{!m.purpose}" style="{!IF(AND(OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)),'border:1px solid red;','')}"/>                            
                            <apex:outputPanel styleClass="error-msg-padding">                              
                                <apex:outputText value="All columns are required" rendered="{!m.hasValidationError}"/>
                                <apex:outputText value="Only input Numeric values for DATATYPE and LAYER" rendered="{!AND(m.hasNumericError,NOT(m.hasValidationError))}"/>
                                <apex:outputText value="Layer row is a duplicate" rendered="{!AND(m.hasDuplicateError,NOT(m.hasNumericError),NOT(m.hasValidationError))}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:column>                  
                    <apex:column headerValue="Data Verified">
                        <apex:image value="/img/msg_icons/confirm32.png" rendered="{!AND(NOT(m.hasValidationError),NOT(m.hasNumericError),NOT(m.hasDuplicateError))}"/>
                        <apex:image value="/img/msg_icons/error32.png" rendered="{!OR(m.hasValidationError,m.hasNumericError,m.hasDuplicateError)}"/>
                    </apex:column>            
            </apex:pageBlockTable>   
        </apex:pageBlock> 
        </apex:actionRegion>   
    </apex:form>
</apex:page>