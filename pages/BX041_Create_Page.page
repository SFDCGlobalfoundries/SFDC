<!-------------------------------------------------------------------------------------------------------------
Name  : BX041_Create_Page.page
Author: Prosenjit Saha and Thomas Lai
Description: The page is used to create BX-041 record.
History:
    PS 14112013:    Approval queue has been added in the Approval seciton.
    TL 09072014:    Hide cancel button to portal users  
                    Hide column Requirement Gaps in Process Information to portal users     
    ZA 09112014:    Updated code as per CASE 18115.
    Psamal       26042016    - Modified code as for Case 00049037.
        
---------------------------------------------------------------------------------------------------------------->
<apex:page standardController="BX_041__c" extensions="BX041_Create" sidebar="FALSE"  id="BX041Page">
<apex:includeScript value="{!URLFOR($Resource.jquery,'js/jquery-1.8.3.min.js')}" />
<!--
<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/js/jquery-1.6.2.min.js"/>
<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/js/jquery-ui-1.8.16.custom.min.js"/>
<apex:stylesheet value="https://ajax.googleapis.com/ajax/libs/jquery/css/ui-lightness/jquery-ui-1.8.16.custom.css"/>
<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jqPlugin/jquery.blockUI.js"/>
-->
<style type="text/css">
    .custPopup {
        background-color: white;
        border-width: 2px;
        border-style: solid;
        z-index: 9999;
        left: 30%;
        padding: 10px;
        position: absolute;
        width: 1000px;
        margin-left: -250px;
        bottom: 100px;
    }
    
    .popupBackground {
        background-color: black;
        opacity: 0.9;
        filter: alpha(opacity =   90);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 9998;
    }
    </style>
    <div class="bPageTitle">
        <div class="ptBody">
            <div class="content">
                <img src="/s.gif" alt="Device" class="pageTitleIcon" title="Device"/>
                <h1 class="pageType">
                    CDRS Edit<span class="titleSeparatingColon">:</span>
                </h1>
                <h2 class="pageDescription">New CDRS</h2>
                <div class="blank">&nbsp;</div>
            </div>
        </div>
        <div class="ptBreadcrumb"></div>
    </div>

    <br />
    
    <apex:form id="BX041Form">
    <apex:pagemessages id="msg" />
    <apex:inputHidden value="{!ipTypeValue}" id="hiddentxt"/>
    <apex:actionStatus onstart="blockPage()" onstop="unblockPage()" id="blockUI"/>
        <apex:pageBlock title="New CDRS" id="pb">
            <!-------------Fields to display in the BX041 header section starts here -------------->  
            <apex:pageBlockSection collapsible="true" title="Information" columns="2">
         
                <apex:outputField value="{!bx041.Device__c}" />
                <apex:outputField value="{!bx041.BX_041_Status__c}" />                                             
                <apex:inputField value="{!bx041.Need_IP_information__c}" id="Need_IP" styleClass="ip_pbs" />
                
                <!--Psamal 26042016-->
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Device Owner" />
                    <apex:outputLink target="_blank" value="/{!deviceOwnerId}">{!deviceOwnerName}</apex:outputLink>
                </apex:pageBlockSectionItem>
               
               <apex:inputField value="{!bx041.Need_IP_Merge_information__c}" id="Need_IPM" styleClass="ipm_pbs" />
                
                <!--Psamal 26042016-->
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Account Owner" />
                    <apex:outputLink target="_blank" value="/{!accountOwnerId}">{!accountOwnerName}</apex:outputLink>
                </apex:pageBlockSectionItem>
                
                
                <apex:inputField value="{!bx041.Need_RF__c}" id="Need_RF" styleClass="RF_pbs" />
                
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Account" />
                    <apex:outputLink target="_blank" value="/{!accountId}">{!accountName}</apex:outputLink>
                </apex:pageBlockSectionItem>
                
                <apex:inputField value="{!bx041.Need_NVM__c}" id="Need_NVM" styleClass="NVM_pbs" />
                <apex:inputField value="{!bx041.Need_High_Voltage__c}" id="Need_HV" styleClass="HV_pbs" />
                <apex:inputField value="{!bx041.Need_eDRAM__c}" id="Need_eDRAM" styleClass="eDRAM_pbs" />
                <apex:inputField value="{!bx041.Need_PowerMOS__c}" id="Need_PowerMOS" styleClass="PMO_pbs" />                
                <apex:inputField value="{!bx041.Need_Turnkey__c}" id="Need_Turnkey" styleClass="TK_pbs" />
                <apex:inputField value="{!bx041.Need_MEMS_informaton__c}"  id="Need_MEMS" styleClass="MEMS_pbs" />
                <apex:outputText value="{!TemplateName}" label="Template for Process Information"  id="template"/>
                <apex:inputField value="{!bx041.Process_ID_is_known__c}"/>
                <apex:inputField value="{!bx041.Reference_Process_ID_txt__c}" />
           
            <apex:pageBlockSectionItem id="BX041pbsi"  labelStyle="width:8%;" dataStyle="width:30%;" rendered="{!$Profile.Name == 'GF FAE/FTS' || isAdmin }">                      
                    <apex:outputLabel >Requested Proccess ID</apex:outputLabel>
                    <apex:outputPanel id="inlineViewMain">                        
                        <apex:outputPanel rendered="{!IF(ISBLANK(bx041.Requested_Process_ID__c), true, false)}" >
                                <apex:inputField label="Requested Process ID" value="{!bx041.Requested_Process_ID__c}" id="BX041REQPIDInput"> 
                                    <apex:actionsupport rerender="wp" action="{!onchangePopulateFEComments}" event="onchange" status="blockUI" />
                                </apex:inputField>                                                     
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!!IF(ISBLANK(bx041.Requested_Process_ID__c), TRUE, FALSE)}">
                                <apex:outputField label="Requested Process ID" value="{!bx041.Requested_Process_ID__c}" id="BX041REQPIDOutput">                              
                                    <apex:inlineEditSupport event="onClick" />
                                </apex:outputField>                          
                            </apex:outputPanel>                               
                        </apex:outputPanel>                       
                </apex:pageBlockSectionItem> 
                
                <apex:outputField value="{!bx041.Requested_Process_ID__c}" rendered="{!$Profile.Name != 'GF FAE/FTS' && NOT(isAdmin)}" />
                
                <!--  ZAmbat 09112014 -->
                <apex:pageBlockSectionItem />
                <apex:inputField value="{!bx041.Key_Notes__c}" />
            </apex:pageBlockSection>
            
            <!-------------Fields to display in the BX041 header section ends here --------------> 
            
            <!---------------------------Additional Informaion ------------------------>
                <apex:pageBlockSection collapsible="false" columns="2" id="addtionalinfo" title="Design Information and Size">
                    <apex:repeat value="{!Fields}" var="f"> 
                        <apex:inputField value="{!BX041[f.fieldPath]}" rendered="{!f.fieldPath != 'Die_Size_X_mm__c' && f.fieldPath != 'Die_Size_Y_mm__c' && f.fieldPath != 'Special_Scribe_Width__c'}" />
                        <apex:pageBlockSectionItem rendered="{!f.fieldPath = 'Die_Size_X_mm__c' || f.fieldPath = 'Die_Size_Y_mm__c' || f.fieldPath = 'Special_Scribe_Width__c'}" >
                            <apex:outputPanel >
                                <apex:outputlabel value="{!f.label}" />
                            </apex:outputPanel>
                            <apex:outputPanel >
                            
                            <div class="requiredInput" style="width:20%" >
                                <div class="requiredBlock" style="{!IF(($Profile.Name == 'GF FAE/FTS' || isAdmin || isCustomer),'display:block;','display: none;')}"></div>
                                <apex:inputText value="{!BX041[f.fieldPath]}" label="{!f.label}" />
                            </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                    </apex:repeat>
                </apex:pageBlockSection>
                <script> twistSection(document.getElementById('{!$Component.pb.addtionalinfo}').getElementsByTagName('img')[0]) </script>
            <!---------------------------Additional Informaion ------------------------>
            <apex:pageBlockButtons location="top">
                <apex:commandButton action="{!save}" value="Save" />
                <apex:commandButton action="{!saveAndClose}" value="Save and Close" />
                <!--<apex:commandButton action="{!submit}" value="Submit For Approval" /> -->
            </apex:pageBlockButtons>
        </apex:pageBlock>
        <!------- This section is responsible to generate all the sections in the page -start ------>  
        <apex:pageBlock id="wp">
            <apex:repeat value="{!topSecWrapperList}" var="top">
                <div id="{!top.shortname}_pbs" style="{!IF(top.visible,'display: block;','display: none;')}">
                    <apex:pageBlockSection collapsible="true" title="{!top.title}" columns="1">
                        <apex:repeat value="{!top.sectionList}" var="sec" >
                            <apex:pageBlockSection title="{!sec.title}">
                                <apex:pageBlockTable value="{!sec.rowList}" style="width:100%" var="row">
                                    
                                        <apex:column style="width:20%" headerValue="Questions" >
                                            <apex:outputPanel >
                                            <div class="requiredInput" style="width:20%" >
                                                <div class="requiredBlock" style="{!IF(row.mandatory == true && ($Profile.Name == 'GF FAE/FTS' || isAdmin || isCustomer),'display:block;','display: none;')}"></div>
                                                <apex:outputText value="{!row.question2Display}" />
                                            </div>
                                            </apex:outputPanel>
                                        </apex:column>
                                        <apex:column style="width:30%" headerValue="{!IF(sec.recordType  == $Label.QM_RT_PI,'Customer Request',IF(sec.recordType  == $Label.QM_RT_GA,'Status','Value'))}">
                                            <apex:selectList size="1" value="{!row.value}" rendered="{!row.fieldType == 'Picklist'}" style="width:155px">
                                                <apex:selectOptions value="{!row.optionList}" id="opt" />
                                            </apex:selectList>
                                            <apex:inputText value="{!row.value}"  rendered="{!row.fieldType == 'Text'}" />
                                        </apex:column>
                                       <apex:column headerValue="Requested PID(FE)" rendered="{!sec.recordType == $Label.QM_RT_PI && Not(isCustomer)}" style="width:155px" >
                                            <apex:outputText value="{!row.fe}" rendered="{!row.feEditable == false }"/>
                                            <apex:outputText value="{!row.fe}" rendered="{!row.feEditable == true && Not($Profile.Name == 'GF FAE/FTS' || isAdmin) }"/>
                                            <apex:inputText value="{!row.fe}" rendered="{!row.feEditable == true && ($Profile.Name == 'GF FAE/FTS' || isAdmin)}"/>
                                        </apex:column>
                                        
                                        <apex:column headerValue="Assigned PID(PI/YE)" style="width:20%" rendered="{!sec.recordType == $Label.QM_RT_PI}">
                                        
                                        </apex:column>
                                        <apex:column style="width:15%" headerValue="Customer Comment" rendered="{!sec.recordType == $Label.QM_RT_PI}">
                                            <apex:inputText value="{!row.custCmts}" />
                                        </apex:column>
                                        <apex:column headerValue="Requirement Gaps" style="width:20%" rendered="{!sec.recordType == $Label.QM_RT_PI && Not(isCustomer)}">
                                            <apex:inputText value="{!row.rqmtGap }" />
                                        </apex:column>
                                        <apex:column style="width:15%" headerValue="Comment" rendered="{!sec.recordType == $Label.QM_RT_GA}">
                                            <apex:outputText value="*" style="Color:red;" rendered="{!(row.value == 'Yes' || row.value == 'Closed') && bx041.BX_041_Status__c == 'Pending Gap Closure'}"></apex:outputText>
                                            
                                            <apex:inputText value="{!row.comment}" />
                                        </apex:column>
                                        
                                        
                                        <apex:column headerValue="Resolution" style="width:15%" rendered="{!sec.recordType == $Label.QM_RT_GA}">
                                            <apex:outputText value="*" style="Color:red;" rendered="{!row.value == 'Closed' && bx041.BX_041_Status__c == 'Pending Gap Closure'}"></apex:outputText>
                                            <apex:inputText value="{!row.resolution}" />
                                        </apex:column>
                                         
                                        <apex:column headerValue="Comments (Internal only)" rendered="{!sec.recordType == $Label.QM_RT_PI && Not(isCustomer)}" style="width:155px">
                                            <apex:inputText value="{!row.internalCmts}" />
                                        </apex:column>
                                        
                                    
                                </apex:pageBlockTable>
                            </apex:pageBlockSection>
                        </apex:repeat>
                    </apex:pageBlockSection>
                </div>
            </apex:repeat>
            </apex:pageBlock>
            <!------- This section is responsible to generate all the sections in the page- ends  ------>
            
             <!------------------------  Start: generate IP section in the page ----------------------->
            <div id="ip_pbs" style="{!IF(bx041.Need_IP_information__c,'display:block;','display: none;')}">
            <apex:pageBlock id="ip_pb" >
             <apex:actionregion >
             <apex:pagemessages />
                <apex:variable value="{!0}" var="rowNum" />
                
                <apex:pageBlockSection title="CDRS IP" id="ip_pbs2" columns="1">
                        <apex:pageBlockTable value="{!ipwList}" var="ipw">
                            
                            <apex:column >
                                <apex:facet name="header">
                                    <apex:commandbutton value="+" action="{!addIp}" rendered="{!addNewIP}" reRender="ip_pb" immediate="true" status="blockUI" >
                                    </apex:commandbutton>
                                </apex:facet>
                                <apex:commandButton value="-" alt="Delete" action="{!remIp}" reRender="ip_pb" status="blockUI" immediate="true" onclick="if(!confirm('Are you sure?')){return};">
                                    <apex:param value="{!rowNum}" name="ipSeq" />
                                </apex:commandButton>
                            </apex:column>
                            <apex:column headerValue="IP Design Kit" >
                            <!------------------------------ replaced by custom lookup window------------------------------
                                    <apex:inputField value="{!ipw.bx041Ip.IP_Master__c}" rendered="{!ipw.stepNo != '2'}" >
                                        <apex:actionsupport action="{!onchangePopulateIP}" event="onchange" status="blockUI" rerender="ip_pb" >
                                            <apex:param value="{!rowNum}" name="ipSeq" />
                                        </apex:actionsupport>
                                    
                                    </apex:inputField>
                                ------------------------------------------------------------------------------------------------>
                        <apex:pageBlockSectionItem id="BX041IPpbsi"  labelStyle="width:8%;" dataStyle="width:30%;" >
                                    <apex:outputPanel rendered="{!ipw.stepNo = '1' && ipw.bx041Ip.IP_Type__c != null }" >
                                       <apex:inputField label="IP Design Kit" value="{!ipw.bx041Ip.IP_Master__c}" id="BX041IPInput" onfocus="document.getElementById('{!$Component.BX041IPInput}').readOnly=true;"> 
                                           <apex:actionsupport action="{!onchangePopulateIP}" event="onchange" status="blockUI" rerender="ip_pb" >
                                               <apex:param value="{!rowNum}" name="ipSeq" />
                                           </apex:actionsupport>
                                        </apex:inputField>        
                                    </apex:outputPanel>                     
                                    <apex:outputField value="{!ipw.bx041Ip.IP_Master__c}" rendered="{!ipw.stepNo = '3'}" />
                        </apex:pageBlockSectionItem>  
                            </apex:column>
                            <apex:column headerValue="IP Type" >
                        <apex:inputField value="{!ipw.bx041Ip.IP_Type__c}" rendered="{!ipw.stepNo != '3'}" id="iptypeValue" > 
                                <apex:actionsupport action="{!onchangeIPType}" event="onchange" status="blockUI" rerender="ip_pb,hiddentxt" >
                                    <apex:param value="{!rowNum}" name="ipSeq" />
                                    </apex:actionsupport>
                                </apex:inputField>
                                <apex:outputField value="{!ipw.bx041Ip.IP_Type__c}" rendered="{!ipw.stepNo = '3'}" />                           
                            </apex:column>
                            <apex:column headerValue="Latest Version" >
                                <apex:outputText value="{!ipw.bx041Ip.Version__c}"/>    
                            </apex:column>
                            <apex:column headerValue="IP Category" >
                                <apex:outputText value="{!ipw.bx041Ip.IP_Catg__c}"/>    
                            </apex:column>
                            <apex:column headerValue="Library Name" >
                                <apex:outputText value="{!ipw.bx041Ip.Lib_Nm__c}"/> 
                            </apex:column>
                            <apex:column headerValue="IP Device List" >
                                <apex:outputText value="{!ipw.bx041Ip.IP_Device_List__c}"/> 
                            </apex:column>
                            <apex:column headerValue="IP Vendor" >
                                 <apex:outputText value="{!ipw.bx041Ip.Vendor__c}"/>
                            </apex:column>
                            <apex:column headerValue="Customer Requirements" >
                                 <apex:outputText value="{!ipw.bx041Ip.Cust_Rqmt__c}"/>
                            </apex:column>
                                                        
                            <apex:column > 
                            <apex:commandButton value="Additional Information" action="{!editIp}" rendered="{!ipw.stepNo = '3' }" reRender="ip_pb" status="blockUI" immediate="true">
                            <apex:param value="{!rowNum}" name="ipSeq" />
                            </apex:commandButton>
                            <apex:commandButton value="Save" action="{!saveIpPopup}" rendered="{!ipw.stepNo = '1' }" reRender="ip_pb" status="blockUI" immediate="true">
                                <apex:param value="{!rowNum}" name="ipSeq" />
                            </apex:commandButton>
                            <apex:variable var="rowNum" value="{!rowNum + 1}" />
                            </apex:column>
                            
                        </apex:pageBlockTable>
                    
                </apex:pageBlockSection>
                <apex:outputPanel styleClass="popupBackground" layout="block" rendered="{!displayPopUp}" id="ipdetail">
                    <apex:outputPanel styleClass="custPopup" layout="block" rendered="{!displayPopUp}">
                        <apex:dynamicComponent componentValue="{!dynamicComp}" id="dcom" />
                    </apex:outputPanel>
                </apex:outputPanel>
                 </apex:actionregion>
            </apex:pageBlock>
        </div>
         <!------------------------  End: generate IP section in the page ----------------------->
         <!------------------------  Start: generate IP Merge section in the page ----------------------->
        <div id="ipm_pbs" style="{!IF(bx041.Need_IP_Merge_information__c,'display:block;','display: none;')}">
            <apex:pageBlock id="ipm_pb" >
            <apex:pagemessages />
            <apex:actionregion >
                <apex:variable value="{!0}" var="rowNum" />
                <apex:pageBlockSection title="CDRS IP Merge" >

                        <apex:pageBlockTable value="{!ipmList}" var="ipm">
                            
                            <apex:column >
                                <apex:facet name="header">
                                    <apex:commandbutton value="+" action="{!addIpm}" reRender="ipm_pb" immediate="true" status="blockUI">
                                    <apex:actionStatus id="counterStatus5" startText="(querying...)"  />
                                    </apex:commandbutton>
                                </apex:facet>
                                <apex:commandButton value="-" alt="Delete" action="{!remIpm}" reRender="ipm_pb" onclick="if(!confirm('Are you sure?')){return};" status="blockUI" immediate="true">
                                    <apex:param value="{!rowNum}" name="ipSeq" />
                                </apex:commandButton>
                            </apex:column>
                            <apex:column headerValue="IP Master" >
                                <apex:inputField value="{!ipm.IP_Master__c}" / >
                            </apex:column>
                            <apex:column headerValue="Remarks" >
                                <apex:inputField value="{!ipm.Remarks__c}" / >
                            </apex:column>
                            <apex:variable var="rowNum" value="{!rowNum + 1}" />
                        </apex:pageBlockTable>
                </apex:pageBlockSection>
                </apex:actionregion>
        </apex:pageBlock>
        
        </div>
        <!------------------------  End: generate IP Merge section in the page ----------------------->
    </apex:form>
     <!------------------------- Script section of the VF page ---------------------------->
    <script type="text/javascript">
    <!-----------------------------------------------lookup functionality start------------------------------------------------->
        
       function openLookup(baseURL,width,modified,searchParam) {
            var baseURLTemp = baseURL;
            var PIds='';
            var obj = '';
            if(getURLParameter(baseURLTemp ,'lknm')!=null){
               //retrieving the component ID using the funciton getURLParameter
               PIds =getURLParameter(baseURLTemp ,'lknm');
            }
            else{
               //retrieving the component ID using the funciton getURLParameter
               PIds = getURLParameter(baseURLTemp ,'lkfm');
            }  
            //if lookup is called from Requested PID or IP Desgin Kit. 
            if(PIds.indexOf('BX041REQPIDInput') != -1 || PIds.indexOf('BX041IPInput') != -1 ){
                if(PIds != ''){
                    if(PIds.indexOf('BX041REQPIDInput') != -1){
                        obj = 'REQPID';    
                    }
                    else if(PIds.indexOf('BX041IPInput') != -1){
                        obj = 'IP';    
                    }
                }
                var processFam = "{!bx041.Process_Family_Filter__c}";
                var Geom = "{!bx041.Geometry_Filter__c}";
                var position = 0;
                var ipType = '';
                ipType =  grabExName();
                
                //creating BaseURL to call the custom Lookup Page
                var baseURL = "{!baseUrl}";
                baseURL += "ProcFam="+ processFam;
                baseURL += "&Geom="+ Geom;
                baseURL += "&Objct="+ obj;
                baseURL += "&iptype="+ ipType ; 
                baseURL += "&frm=BX041Page:BX041Form";
                baseURL += "&pids="+ PIds;
                baseURL += "&lksearch=" + searchParam;
                
                //Opening the popup/lookup window
                openPopup(baseURL, "lookup", 350, 480, "width="+width+",height=480,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
            }
            //For Lookups other than Requested PID and IP Design Kit. 
            else{
                openPopup(baseURL, "lookup", 350, 480, "width="+width+",height=480,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
            }
       }
       
       //used to get the IP Type selected by the user.  
       function grabExName()
       {   if( document.getElementById('{!$Component.BX041Page:BX041Form:hiddentxt}').value != ''){         
               var ex = document.getElementById('{!$Component.BX041Page:BX041Form:hiddentxt}').value;
               return ex;
           }
           else{
               var e = '';
               return e;
           }
       }
       
       //This function returns the Component ID
       function getURLParameter(url,name) {
            return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(url)||[,""])[1].replace(/\+/g, '%20'))||null;
       }
       
       function switchview(output,input,showTextField) {
        
            var spanOut = document.getElementById(output);
            var spanIn = document.getElementById(input);
            
            if(showTextField == true) {
                spanOut.style.display = 'none';
                spanIn.style.display = 'block';
            } else {
                spanOut.style.display = 'block';
                spanIn.style.display = 'none';
            }
       }
       
    
    <!-----------------------------------------------lookup functionality end------------------------------------------------->
        var j$ = jQuery.noConflict();

        j$(function() {
       
            j$(':checkbox').click(function() {
          
                var clicked = this;

                var divSelector = 'div#' + j$(this).attr("class");
           
                if (j$(this).prop("checked")) {
                    j$(divSelector).slideDown('slow');
                       if(j$(this).attr("id").indexOf('Need_MEMS') != -1){
                        j$("div#PI_pbs").slideUp('slow');
                    }
                } else {
                    j$(divSelector).slideUp('slow');
                    if(j$(this).attr("id").indexOf('Need_MEMS') != -1){
                        j$("div#PI_pbs").slideDown('slow');
                    }
                }
            });
        });
        
        
    </script>
    <script>
            /*!
         * jQuery blockUI plugin
         * Version 2.37 (29-JAN-2011)
         * @requires jQuery v1.2.3 or later
         *
         * Examples at: http://malsup.com/jquery/block/
         * Copyright (c) 2007-2010 M. Alsup
         * Dual licensed under the MIT and GPL licenses:
         * http://www.opensource.org/licenses/mit-license.php
         * http://www.gnu.org/licenses/gpl.html
         *
         * Thanks to Amir-Hossein Sobhi for some excellent contributions!
         */
        
        ;(function($) {
        
        if (/1\.(0|1|2)\.(0|1|2)/.test($.fn.jquery) || /^1.1/.test($.fn.jquery)) {
            alert('blockUI requires jQuery v1.2.3 or later!  You are using v' + $.fn.jquery);
            return;
        }
        
        $.fn._fadeIn = $.fn.fadeIn;
        
        var noOp = function() {};
        
        // this bit is to ensure we don't call setExpression when we shouldn't (with extra muscle to handle
        // retarded userAgent strings on Vista)
        var mode = document.documentMode || 0;
        var setExpr = $.browser.msie && (($.browser.version < 8 && !mode) || mode < 8);
        var ie6 = $.browser.msie && /MSIE 6.0/.test(navigator.userAgent) && !mode;
        
        // global $ methods for blocking/unblocking the entire page
        $.blockUI   = function(opts) { install(window, opts); };
        $.unblockUI = function(opts) { remove(window, opts); };
        
        // convenience method for quick growl-like notifications  (http://www.google.com/search?q=growl)
        $.growlUI = function(title, message, timeout, onClose) {
            var $m = $('<div class="growlUI"></div>');
            if (title) $m.append('<h1>'+title+'</h1>');
            if (message) $m.append('<h2>'+message+'</h2>');
            if (timeout == undefined) timeout = 3000;
            $.blockUI({
                message: $m, fadeIn: 700, fadeOut: 1000, centerY: false,
                timeout: timeout, showOverlay: false,
                onUnblock: onClose, 
                css: $.blockUI.defaults.growlCSS
            });
        };
        
        // plugin method for blocking element content
        $.fn.block = function(opts) {
            return this.unblock({ fadeOut: 0 }).each(function() {
                if ($.css(this,'position') == 'static')
                    this.style.position = 'relative';
                if ($.browser.msie)
                    this.style.zoom = 1; // force 'hasLayout'
                install(this, opts);
            });
        };
        
        // plugin method for unblocking element content
        $.fn.unblock = function(opts) {
            return this.each(function() {
                remove(this, opts);
            });
        };
        
        $.blockUI.version = 2.37; // 2nd generation blocking at no extra cost!
        
        // override these in your code to change the default behavior and style
        $.blockUI.defaults = {
            // message displayed when blocking (use null for no message)
            message:  '<h1>Please wait...</h1>',
        
            title: null,      // title string; only used when theme == true
            draggable: true,  // only used when theme == true (requires jquery-ui.js to be loaded)
            
            theme: false, // set to true to use with jQuery UI themes
            
            // styles for the message when blocking; if you wish to disable
            // these and use an external stylesheet then do this in your code:
            // $.blockUI.defaults.css = {};
            css: {
                padding:    0,
                margin:     0,
                width:      '30%',
                top:        '40%',
                left:       '35%',
                textAlign:  'center',
                color:      '#000',
                border:     '3px solid #aaa',
                backgroundColor:'#fff',
                cursor:     'wait'
            },
            
            // minimal style set used when themes are used
            themedCSS: {
                width:  '30%',
                top:    '40%',
                left:   '35%'
            },
        
            // styles for the overlay
            overlayCSS:  {
                backgroundColor: '#000',
                opacity:         0.6,
                cursor:          'wait'
            },
        
            // styles applied when using $.growlUI
            growlCSS: {
                width:      '350px',
                top:        '10px',
                left:       '',
                right:      '10px',
                border:     'none',
                padding:    '5px',
                opacity:    0.6,
                cursor:     'default',
                color:      '#fff',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius':    '10px',
                'border-radius':         '10px'
            },
            
            // IE issues: 'about:blank' fails on HTTPS and javascript:false is s-l-o-w
            // (hat tip to Jorge H. N. de Vasconcelos)
            iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',
        
            // force usage of iframe in non-IE browsers (handy for blocking applets)
            forceIframe: false,
        
            // z-index for the blocking overlay
            baseZ: 1000,
        
            // set these to true to have the message automatically centered
            centerX: true, // <-- only effects element blocking (page block controlled via css above)
            centerY: true,
        
            // allow body element to be stetched in ie6; this makes blocking look better
            // on "short" pages.  disable if you wish to prevent changes to the body height
            allowBodyStretch: true,
        
            // enable if you want key and mouse events to be disabled for content that is blocked
            bindEvents: true,
        
            // be default blockUI will supress tab navigation from leaving blocking content
            // (if bindEvents is true)
            constrainTabKey: true,
        
            // fadeIn time in millis; set to 0 to disable fadeIn on block
            fadeIn:  200,
        
            // fadeOut time in millis; set to 0 to disable fadeOut on unblock
            fadeOut:  400,
        
            // time in millis to wait before auto-unblocking; set to 0 to disable auto-unblock
            timeout: 0,
        
            // disable if you don't want to show the overlay
            showOverlay: true,
        
            // if true, focus will be placed in the first available input field when
            // page blocking
            focusInput: true,
        
            // suppresses the use of overlay styles on FF/Linux (due to performance issues with opacity)
            applyPlatformOpacityRules: true,
            
            // callback method invoked when fadeIn has completed and blocking message is visible
            onBlock: null,
        
            // callback method invoked when unblocking has completed; the callback is
            // passed the element that has been unblocked (which is the window object for page
            // blocks) and the options that were passed to the unblock call:
            //   onUnblock(element, options)
            onUnblock: null,
        
            // don't ask; if you really must know: http://groups.google.com/group/jquery-en/browse_thread/thread/36640a8730503595/2f6a79a77a78e493#2f6a79a77a78e493
            quirksmodeOffsetHack: 4,
        
            // class name of the message block
            blockMsgClass: 'blockMsg'
        };
        
        // private data and functions follow...
        
        var pageBlock = null;
        var pageBlockEls = [];
        
        function install(el, opts) {
            var full = (el == window);
            var msg = opts && opts.message !== undefined ? opts.message : undefined;
            opts = $.extend({}, $.blockUI.defaults, opts || {});
            opts.overlayCSS = $.extend({}, $.blockUI.defaults.overlayCSS, opts.overlayCSS || {});
            var css = $.extend({}, $.blockUI.defaults.css, opts.css || {});
            var themedCSS = $.extend({}, $.blockUI.defaults.themedCSS, opts.themedCSS || {});
            msg = msg === undefined ? opts.message : msg;
        
            // remove the current block (if there is one)
            if (full && pageBlock)
                remove(window, {fadeOut:0});
        
            // if an existing element is being used as the blocking content then we capture
            // its current place in the DOM (and current display style) so we can restore
            // it when we unblock
            if (msg && typeof msg != 'string' && (msg.parentNode || msg.jquery)) {
                var node = msg.jquery ? msg[0] : msg;
                var data = {};
                $(el).data('blockUI.history', data);
                data.el = node;
                data.parent = node.parentNode;
                data.display = node.style.display;
                data.position = node.style.position;
                if (data.parent)
                    data.parent.removeChild(node);
            }
        
            var z = opts.baseZ;
        
            // blockUI uses 3 layers for blocking, for simplicity they are all used on every platform;
            // layer1 is the iframe layer which is used to supress bleed through of underlying content
            // layer2 is the overlay layer which has opacity and a wait cursor (by default)
            // layer3 is the message content that is displayed while blocking
        
            var lyr1 = ($.browser.msie || opts.forceIframe) 
                ? $('<iframe class="blockUI" style="z-index:'+ (z++) +';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="'+opts.iframeSrc+'"></iframe>')
                : $('<div class="blockUI" style="display:none"></div>');
            var lyr2 = $('<div class="blockUI blockOverlay" style="z-index:'+ (z++) +';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>');
            
            var lyr3, s;
            if (opts.theme && full) {
                s = '<div class="blockUI ' + opts.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:'+z+';display:none;position:fixed">' +
                        '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">'+(opts.title || '&nbsp;')+'</div>' +
                        '<div class="ui-widget-content ui-dialog-content"></div>' +
                    '</div>';
            }
            else if (opts.theme) {
                s = '<div class="blockUI ' + opts.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:'+z+';display:none;position:absolute">' +
                        '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">'+(opts.title || '&nbsp;')+'</div>' +
                        '<div class="ui-widget-content ui-dialog-content"></div>' +
                    '</div>';
            }
            else if (full) {
                s = '<div class="blockUI ' + opts.blockMsgClass + ' blockPage" style="z-index:'+z+';display:none;position:fixed"></div>';
            }           
            else {
                s = '<div class="blockUI ' + opts.blockMsgClass + ' blockElement" style="z-index:'+z+';display:none;position:absolute"></div>';
            }
            lyr3 = $(s);
        
            // if we have a message, style it
            if (msg) {
                if (opts.theme) {
                    lyr3.css(themedCSS);
                    lyr3.addClass('ui-widget-content');
                }
                else 
                    lyr3.css(css);
            }
        
            // style the overlay
            if (!opts.applyPlatformOpacityRules || !($.browser.mozilla && /Linux/.test(navigator.platform)))
                lyr2.css(opts.overlayCSS);
            lyr2.css('position', full ? 'fixed' : 'absolute');
        
            // make iframe layer transparent in IE
            if ($.browser.msie || opts.forceIframe)
                lyr1.css('opacity',0.0);
        
            //$([lyr1[0],lyr2[0],lyr3[0]]).appendTo(full ? 'body' : el);
            var layers = [lyr1,lyr2,lyr3], $par = full ? $('body') : $(el);
            $.each(layers, function() {
                this.appendTo($par);
            });
            
            if (opts.theme && opts.draggable && $.fn.draggable) {
                lyr3.draggable({
                    handle: '.ui-dialog-titlebar',
                    cancel: 'li'
                });
            }
        
            // ie7 must use absolute positioning in quirks mode and to account for activex issues (when scrolling)
            var expr = setExpr && (!$.boxModel || $('object,embed', full ? null : el).length > 0);
            if (ie6 || expr) {
                // give body 100% height
                if (full && opts.allowBodyStretch && $.boxModel)
                    $('html,body').css('height','100%');
        
                // fix ie6 issue when blocked element has a border width
                if ((ie6 || !$.boxModel) && !full) {
                    var t = sz(el,'borderTopWidth'), l = sz(el,'borderLeftWidth');
                    var fixT = t ? '(0 - '+t+')' : 0;
                    var fixL = l ? '(0 - '+l+')' : 0;
                }
        
                // simulate fixed position
                $.each([lyr1,lyr2,lyr3], function(i,o) {
                    var s = o[0].style;
                    s.position = 'absolute';
                    if (i < 2) {
                        full ? s.setExpression('height','Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.boxModel?0:'+opts.quirksmodeOffsetHack+') + "px"')
                             : s.setExpression('height','this.parentNode.offsetHeight + "px"');
                        full ? s.setExpression('width','jQuery.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"')
                             : s.setExpression('width','this.parentNode.offsetWidth + "px"');
                        if (fixL) s.setExpression('left', fixL);
                        if (fixT) s.setExpression('top', fixT);
                    }
                    else if (opts.centerY) {
                        if (full) s.setExpression('top','(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
                        s.marginTop = 0;
                    }
                    else if (!opts.centerY && full) {
                        var top = (opts.css && opts.css.top) ? parseInt(opts.css.top) : 0;
                        var expression = '((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + '+top+') + "px"';
                        s.setExpression('top',expression);
                    }
                });
            }
        
            // show the message
            if (msg) {
                if (opts.theme)
                    lyr3.find('.ui-widget-content').append(msg);
                else
                    lyr3.append(msg);
                if (msg.jquery || msg.nodeType)
                    $(msg).show();
            }
        
            if (($.browser.msie || opts.forceIframe) && opts.showOverlay)
                lyr1.show(); // opacity is zero
            if (opts.fadeIn) {
                var cb = opts.onBlock ? opts.onBlock : noOp;
                var cb1 = (opts.showOverlay && !msg) ? cb : noOp;
                var cb2 = msg ? cb : noOp;
                if (opts.showOverlay)
                    lyr2._fadeIn(opts.fadeIn, cb1);
                if (msg)
                    lyr3._fadeIn(opts.fadeIn, cb2);
            }
            else {
                if (opts.showOverlay)
                    lyr2.show();
                if (msg)
                    lyr3.show();
                if (opts.onBlock)
                    opts.onBlock();
            }
        
            // bind key and mouse events
            bind(1, el, opts);
        
            if (full) {
                pageBlock = lyr3[0];
                pageBlockEls = $(':input:enabled:visible',pageBlock);
                if (opts.focusInput)
                    setTimeout(focus, 20);
            }
            else
                center(lyr3[0], opts.centerX, opts.centerY);
        
            if (opts.timeout) {
                // auto-unblock
                var to = setTimeout(function() {
                    full ? $.unblockUI(opts) : $(el).unblock(opts);
                }, opts.timeout);
                $(el).data('blockUI.timeout', to);
            }
        };
        
        // remove the block
        function remove(el, opts) {
            var full = (el == window);
            var $el = $(el);
            var data = $el.data('blockUI.history');
            var to = $el.data('blockUI.timeout');
            if (to) {
                clearTimeout(to);
                $el.removeData('blockUI.timeout');
            }
            opts = $.extend({}, $.blockUI.defaults, opts || {});
            bind(0, el, opts); // unbind events
            
            var els;
            if (full) // crazy selector to handle odd field errors in ie6/7
                els = $('body').children().filter('.blockUI').add('body > .blockUI');
            else
                els = $('.blockUI', el);
        
            if (full)
                pageBlock = pageBlockEls = null;
        
            if (opts.fadeOut) {
                els.fadeOut(opts.fadeOut);
                setTimeout(function() { reset(els,data,opts,el); }, opts.fadeOut);
            }
            else
                reset(els, data, opts, el);
        };
        
        // move blocking element back into the DOM where it started
        function reset(els,data,opts,el) {
            els.each(function(i,o) {
                // remove via DOM calls so we don't lose event handlers
                if (this.parentNode)
                    this.parentNode.removeChild(this);
            });
        
            if (data && data.el) {
                data.el.style.display = data.display;
                data.el.style.position = data.position;
                if (data.parent)
                    data.parent.appendChild(data.el);
                $(el).removeData('blockUI.history');
            }
        
            if (typeof opts.onUnblock == 'function')
                opts.onUnblock(el,opts);
        };
        
        // bind/unbind the handler
        function bind(b, el, opts) {
            var full = el == window, $el = $(el);
        
            // don't bother unbinding if there is nothing to unbind
            if (!b && (full && !pageBlock || !full && !$el.data('blockUI.isBlocked')))
                return;
            if (!full)
                $el.data('blockUI.isBlocked', b);
        
            // don't bind events when overlay is not in use or if bindEvents is false
            if (!opts.bindEvents || (b && !opts.showOverlay)) 
                return;
        
            // bind anchors and inputs for mouse and key events
            var events = 'mousedown mouseup keydown keypress';
            b ? $(document).bind(events, opts, handler) : $(document).unbind(events, handler);
        
        // former impl...
        //     var $e = $('a,:input');
        //     b ? $e.bind(events, opts, handler) : $e.unbind(events, handler);
        };
        
        // event handler to suppress keyboard/mouse events when blocking
        function handler(e) {
            // allow tab navigation (conditionally)
            if (e.keyCode && e.keyCode == 9) {
                if (pageBlock && e.data.constrainTabKey) {
                    var els = pageBlockEls;
                    var fwd = !e.shiftKey && e.target === els[els.length-1];
                    var back = e.shiftKey && e.target === els[0];
                    if (fwd || back) {
                        setTimeout(function(){focus(back)},10);
                        return false;
                    }
                }
            }
            var opts = e.data;
            // allow events within the message content
            if ($(e.target).parents('div.' + opts.blockMsgClass).length > 0)
                return true;
        
            // allow events for content that is not being blocked
            return $(e.target).parents().children().filter('div.blockUI').length == 0;
        };
        
        function focus(back) {
            if (!pageBlockEls)
                return;
            var e = pageBlockEls[back===true ? pageBlockEls.length-1 : 0];
            if (e)
                e.focus();
        };
        
        function center(el, x, y) {
            var p = el.parentNode, s = el.style;
            var l = ((p.offsetWidth - el.offsetWidth)/2) - sz(p,'borderLeftWidth');
            var t = ((p.offsetHeight - el.offsetHeight)/2) - sz(p,'borderTopWidth');
            if (x) s.left = l > 0 ? (l+'px') : '0';
            if (y) s.top  = t > 0 ? (t+'px') : '0';
        };
        
        function sz(el, p) {
            return parseInt($.css(el,p))||0;
        };
        
        })(jQuery);
        
            </script>
            <script>
                $j = jQuery.noConflict();
                
                //function to block the whole page
                function blockPage(){ 
                    $j.blockUI({ message: '<img src="/img/loading32.gif" /><h1> Loading...</h1>', 
                        css: { 
                         border: 'none', 
                         padding: '15px',  
                         '-webkit-border-radius': '10px', 
                         '-moz-border-radius': '10px', 
                         opacity: .9
                        } 
                    }); 
                    return false;
                }
                
                //function to unblock the page
                function unblockPage(){
                    $j.unblockUI();
                }
                

    </script>
 <!------------------------- Script section of the VF page ---------------------------->
</apex:page>